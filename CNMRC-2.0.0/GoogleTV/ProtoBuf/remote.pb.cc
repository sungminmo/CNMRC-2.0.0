// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "remote.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace anymote {
namespace messages {

void protobuf_ShutdownFile_remote_2eproto() {
  delete RemoteMessage::default_instance_;
  delete RequestMessage::default_instance_;
  delete ResponseMessage::default_instance_;
  delete KeyEvent::default_instance_;
  delete MouseEvent::default_instance_;
  delete MouseWheel::default_instance_;
  delete Connect::default_instance_;
  delete Fling::default_instance_;
  delete Data::default_instance_;
  delete FlingResult::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_remote_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_remote_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::anymote::messages::protobuf_AddDesc_keycodes_2eproto();
  RemoteMessage::default_instance_ = new RemoteMessage();
  RequestMessage::default_instance_ = new RequestMessage();
  ResponseMessage::default_instance_ = new ResponseMessage();
  KeyEvent::default_instance_ = new KeyEvent();
  MouseEvent::default_instance_ = new MouseEvent();
  MouseWheel::default_instance_ = new MouseWheel();
  Connect::default_instance_ = new Connect();
  Fling::default_instance_ = new Fling();
  Data::default_instance_ = new Data();
  FlingResult::default_instance_ = new FlingResult();
  RemoteMessage::default_instance_->InitAsDefaultInstance();
  RequestMessage::default_instance_->InitAsDefaultInstance();
  ResponseMessage::default_instance_->InitAsDefaultInstance();
  KeyEvent::default_instance_->InitAsDefaultInstance();
  MouseEvent::default_instance_->InitAsDefaultInstance();
  MouseWheel::default_instance_->InitAsDefaultInstance();
  Connect::default_instance_->InitAsDefaultInstance();
  Fling::default_instance_->InitAsDefaultInstance();
  Data::default_instance_->InitAsDefaultInstance();
  FlingResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_remote_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_remote_2eproto_once_);
void protobuf_AddDesc_remote_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_remote_2eproto_once_,
                 &protobuf_AddDesc_remote_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_remote_2eproto {
  StaticDescriptorInitializer_remote_2eproto() {
    protobuf_AddDesc_remote_2eproto();
  }
} static_descriptor_initializer_remote_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int RemoteMessage::kSequenceNumberFieldNumber;
const int RemoteMessage::kRequestMessageFieldNumber;
const int RemoteMessage::kResponseMessageFieldNumber;
#endif  // !_MSC_VER

RemoteMessage::RemoteMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:anymote.messages.RemoteMessage)
}

void RemoteMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  request_message_ = const_cast< ::anymote::messages::RequestMessage*>(
      ::anymote::messages::RequestMessage::internal_default_instance());
#else
  request_message_ = const_cast< ::anymote::messages::RequestMessage*>(&::anymote::messages::RequestMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  response_message_ = const_cast< ::anymote::messages::ResponseMessage*>(
      ::anymote::messages::ResponseMessage::internal_default_instance());
#else
  response_message_ = const_cast< ::anymote::messages::ResponseMessage*>(&::anymote::messages::ResponseMessage::default_instance());
#endif
}

RemoteMessage::RemoteMessage(const RemoteMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:anymote.messages.RemoteMessage)
}

void RemoteMessage::SharedCtor() {
  _cached_size_ = 0;
  sequence_number_ = 0u;
  request_message_ = NULL;
  response_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteMessage::~RemoteMessage() {
  // @@protoc_insertion_point(destructor:anymote.messages.RemoteMessage)
  SharedDtor();
}

void RemoteMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete request_message_;
    delete response_message_;
  }
}

void RemoteMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoteMessage& RemoteMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_remote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
#endif
  return *default_instance_;
}

RemoteMessage* RemoteMessage::default_instance_ = NULL;

RemoteMessage* RemoteMessage::New() const {
  return new RemoteMessage;
}

void RemoteMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    sequence_number_ = 0u;
    if (has_request_message()) {
      if (request_message_ != NULL) request_message_->::anymote::messages::RequestMessage::Clear();
    }
    if (has_response_message()) {
      if (response_message_ != NULL) response_message_->::anymote::messages::ResponseMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RemoteMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:anymote.messages.RemoteMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sequence_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request_message;
        break;
      }

      // optional .anymote.messages.RequestMessage request_message = 2;
      case 2: {
        if (tag == 18) {
         parse_request_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_response_message;
        break;
      }

      // optional .anymote.messages.ResponseMessage response_message = 3;
      case 3: {
        if (tag == 26) {
         parse_response_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:anymote.messages.RemoteMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:anymote.messages.RemoteMessage)
  return false;
#undef DO_
}

void RemoteMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:anymote.messages.RemoteMessage)
  // optional uint32 sequence_number = 1;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sequence_number(), output);
  }

  // optional .anymote.messages.RequestMessage request_message = 2;
  if (has_request_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->request_message(), output);
  }

  // optional .anymote.messages.ResponseMessage response_message = 3;
  if (has_response_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->response_message(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:anymote.messages.RemoteMessage)
}

int RemoteMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sequence_number = 1;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_number());
    }

    // optional .anymote.messages.RequestMessage request_message = 2;
    if (has_request_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_message());
    }

    // optional .anymote.messages.ResponseMessage response_message = 3;
    if (has_response_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response_message());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoteMessage*>(&from));
}

void RemoteMessage::MergeFrom(const RemoteMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
    if (from.has_request_message()) {
      mutable_request_message()->::anymote::messages::RequestMessage::MergeFrom(from.request_message());
    }
    if (from.has_response_message()) {
      mutable_response_message()->::anymote::messages::ResponseMessage::MergeFrom(from.response_message());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RemoteMessage::CopyFrom(const RemoteMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteMessage::IsInitialized() const {

  if (has_request_message()) {
    if (!this->request_message().IsInitialized()) return false;
  }
  if (has_response_message()) {
    if (!this->response_message().IsInitialized()) return false;
  }
  return true;
}

void RemoteMessage::Swap(RemoteMessage* other) {
  if (other != this) {
    std::swap(sequence_number_, other->sequence_number_);
    std::swap(request_message_, other->request_message_);
    std::swap(response_message_, other->response_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RemoteMessage::GetTypeName() const {
  return "anymote.messages.RemoteMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestMessage::kKeyEventMessageFieldNumber;
const int RequestMessage::kMouseEventMessageFieldNumber;
const int RequestMessage::kMouseWheelMessageFieldNumber;
const int RequestMessage::kDataMessageFieldNumber;
const int RequestMessage::kConnectMessageFieldNumber;
const int RequestMessage::kFlingMessageFieldNumber;
#endif  // !_MSC_VER

RequestMessage::RequestMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:anymote.messages.RequestMessage)
}

void RequestMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  key_event_message_ = const_cast< ::anymote::messages::KeyEvent*>(
      ::anymote::messages::KeyEvent::internal_default_instance());
#else
  key_event_message_ = const_cast< ::anymote::messages::KeyEvent*>(&::anymote::messages::KeyEvent::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  mouse_event_message_ = const_cast< ::anymote::messages::MouseEvent*>(
      ::anymote::messages::MouseEvent::internal_default_instance());
#else
  mouse_event_message_ = const_cast< ::anymote::messages::MouseEvent*>(&::anymote::messages::MouseEvent::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  mouse_wheel_message_ = const_cast< ::anymote::messages::MouseWheel*>(
      ::anymote::messages::MouseWheel::internal_default_instance());
#else
  mouse_wheel_message_ = const_cast< ::anymote::messages::MouseWheel*>(&::anymote::messages::MouseWheel::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  data_message_ = const_cast< ::anymote::messages::Data*>(
      ::anymote::messages::Data::internal_default_instance());
#else
  data_message_ = const_cast< ::anymote::messages::Data*>(&::anymote::messages::Data::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  connect_message_ = const_cast< ::anymote::messages::Connect*>(
      ::anymote::messages::Connect::internal_default_instance());
#else
  connect_message_ = const_cast< ::anymote::messages::Connect*>(&::anymote::messages::Connect::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fling_message_ = const_cast< ::anymote::messages::Fling*>(
      ::anymote::messages::Fling::internal_default_instance());
#else
  fling_message_ = const_cast< ::anymote::messages::Fling*>(&::anymote::messages::Fling::default_instance());
#endif
}

RequestMessage::RequestMessage(const RequestMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:anymote.messages.RequestMessage)
}

void RequestMessage::SharedCtor() {
  _cached_size_ = 0;
  key_event_message_ = NULL;
  mouse_event_message_ = NULL;
  mouse_wheel_message_ = NULL;
  data_message_ = NULL;
  connect_message_ = NULL;
  fling_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestMessage::~RequestMessage() {
  // @@protoc_insertion_point(destructor:anymote.messages.RequestMessage)
  SharedDtor();
}

void RequestMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete key_event_message_;
    delete mouse_event_message_;
    delete mouse_wheel_message_;
    delete data_message_;
    delete connect_message_;
    delete fling_message_;
  }
}

void RequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestMessage& RequestMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_remote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
#endif
  return *default_instance_;
}

RequestMessage* RequestMessage::default_instance_ = NULL;

RequestMessage* RequestMessage::New() const {
  return new RequestMessage;
}

void RequestMessage::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_key_event_message()) {
      if (key_event_message_ != NULL) key_event_message_->::anymote::messages::KeyEvent::Clear();
    }
    if (has_mouse_event_message()) {
      if (mouse_event_message_ != NULL) mouse_event_message_->::anymote::messages::MouseEvent::Clear();
    }
    if (has_mouse_wheel_message()) {
      if (mouse_wheel_message_ != NULL) mouse_wheel_message_->::anymote::messages::MouseWheel::Clear();
    }
    if (has_data_message()) {
      if (data_message_ != NULL) data_message_->::anymote::messages::Data::Clear();
    }
    if (has_connect_message()) {
      if (connect_message_ != NULL) connect_message_->::anymote::messages::Connect::Clear();
    }
    if (has_fling_message()) {
      if (fling_message_ != NULL) fling_message_->::anymote::messages::Fling::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:anymote.messages.RequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .anymote.messages.KeyEvent key_event_message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key_event_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mouse_event_message;
        break;
      }

      // optional .anymote.messages.MouseEvent mouse_event_message = 2;
      case 2: {
        if (tag == 18) {
         parse_mouse_event_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mouse_event_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mouse_wheel_message;
        break;
      }

      // optional .anymote.messages.MouseWheel mouse_wheel_message = 3;
      case 3: {
        if (tag == 26) {
         parse_mouse_wheel_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mouse_wheel_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data_message;
        break;
      }

      // optional .anymote.messages.Data data_message = 4;
      case 4: {
        if (tag == 34) {
         parse_data_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_connect_message;
        break;
      }

      // optional .anymote.messages.Connect connect_message = 5;
      case 5: {
        if (tag == 42) {
         parse_connect_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fling_message;
        break;
      }

      // optional .anymote.messages.Fling fling_message = 6;
      case 6: {
        if (tag == 50) {
         parse_fling_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fling_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:anymote.messages.RequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:anymote.messages.RequestMessage)
  return false;
#undef DO_
}

void RequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:anymote.messages.RequestMessage)
  // optional .anymote.messages.KeyEvent key_event_message = 1;
  if (has_key_event_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->key_event_message(), output);
  }

  // optional .anymote.messages.MouseEvent mouse_event_message = 2;
  if (has_mouse_event_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->mouse_event_message(), output);
  }

  // optional .anymote.messages.MouseWheel mouse_wheel_message = 3;
  if (has_mouse_wheel_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->mouse_wheel_message(), output);
  }

  // optional .anymote.messages.Data data_message = 4;
  if (has_data_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->data_message(), output);
  }

  // optional .anymote.messages.Connect connect_message = 5;
  if (has_connect_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->connect_message(), output);
  }

  // optional .anymote.messages.Fling fling_message = 6;
  if (has_fling_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->fling_message(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:anymote.messages.RequestMessage)
}

int RequestMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .anymote.messages.KeyEvent key_event_message = 1;
    if (has_key_event_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key_event_message());
    }

    // optional .anymote.messages.MouseEvent mouse_event_message = 2;
    if (has_mouse_event_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mouse_event_message());
    }

    // optional .anymote.messages.MouseWheel mouse_wheel_message = 3;
    if (has_mouse_wheel_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mouse_wheel_message());
    }

    // optional .anymote.messages.Data data_message = 4;
    if (has_data_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_message());
    }

    // optional .anymote.messages.Connect connect_message = 5;
    if (has_connect_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connect_message());
    }

    // optional .anymote.messages.Fling fling_message = 6;
    if (has_fling_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fling_message());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestMessage*>(&from));
}

void RequestMessage::MergeFrom(const RequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_event_message()) {
      mutable_key_event_message()->::anymote::messages::KeyEvent::MergeFrom(from.key_event_message());
    }
    if (from.has_mouse_event_message()) {
      mutable_mouse_event_message()->::anymote::messages::MouseEvent::MergeFrom(from.mouse_event_message());
    }
    if (from.has_mouse_wheel_message()) {
      mutable_mouse_wheel_message()->::anymote::messages::MouseWheel::MergeFrom(from.mouse_wheel_message());
    }
    if (from.has_data_message()) {
      mutable_data_message()->::anymote::messages::Data::MergeFrom(from.data_message());
    }
    if (from.has_connect_message()) {
      mutable_connect_message()->::anymote::messages::Connect::MergeFrom(from.connect_message());
    }
    if (from.has_fling_message()) {
      mutable_fling_message()->::anymote::messages::Fling::MergeFrom(from.fling_message());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RequestMessage::CopyFrom(const RequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMessage::IsInitialized() const {

  if (has_key_event_message()) {
    if (!this->key_event_message().IsInitialized()) return false;
  }
  if (has_mouse_event_message()) {
    if (!this->mouse_event_message().IsInitialized()) return false;
  }
  if (has_mouse_wheel_message()) {
    if (!this->mouse_wheel_message().IsInitialized()) return false;
  }
  if (has_data_message()) {
    if (!this->data_message().IsInitialized()) return false;
  }
  if (has_connect_message()) {
    if (!this->connect_message().IsInitialized()) return false;
  }
  if (has_fling_message()) {
    if (!this->fling_message().IsInitialized()) return false;
  }
  return true;
}

void RequestMessage::Swap(RequestMessage* other) {
  if (other != this) {
    std::swap(key_event_message_, other->key_event_message_);
    std::swap(mouse_event_message_, other->mouse_event_message_);
    std::swap(mouse_wheel_message_, other->mouse_wheel_message_);
    std::swap(data_message_, other->data_message_);
    std::swap(connect_message_, other->connect_message_);
    std::swap(fling_message_, other->fling_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestMessage::GetTypeName() const {
  return "anymote.messages.RequestMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseMessage::kDataMessageFieldNumber;
const int ResponseMessage::kFlingResultMessageFieldNumber;
#endif  // !_MSC_VER

ResponseMessage::ResponseMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:anymote.messages.ResponseMessage)
}

void ResponseMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  data_message_ = const_cast< ::anymote::messages::Data*>(
      ::anymote::messages::Data::internal_default_instance());
#else
  data_message_ = const_cast< ::anymote::messages::Data*>(&::anymote::messages::Data::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fling_result_message_ = const_cast< ::anymote::messages::FlingResult*>(
      ::anymote::messages::FlingResult::internal_default_instance());
#else
  fling_result_message_ = const_cast< ::anymote::messages::FlingResult*>(&::anymote::messages::FlingResult::default_instance());
#endif
}

ResponseMessage::ResponseMessage(const ResponseMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:anymote.messages.ResponseMessage)
}

void ResponseMessage::SharedCtor() {
  _cached_size_ = 0;
  data_message_ = NULL;
  fling_result_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseMessage::~ResponseMessage() {
  // @@protoc_insertion_point(destructor:anymote.messages.ResponseMessage)
  SharedDtor();
}

void ResponseMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete data_message_;
    delete fling_result_message_;
  }
}

void ResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseMessage& ResponseMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_remote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
#endif
  return *default_instance_;
}

ResponseMessage* ResponseMessage::default_instance_ = NULL;

ResponseMessage* ResponseMessage::New() const {
  return new ResponseMessage;
}

void ResponseMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_data_message()) {
      if (data_message_ != NULL) data_message_->::anymote::messages::Data::Clear();
    }
    if (has_fling_result_message()) {
      if (fling_result_message_ != NULL) fling_result_message_->::anymote::messages::FlingResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:anymote.messages.ResponseMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .anymote.messages.Data data_message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fling_result_message;
        break;
      }

      // optional .anymote.messages.FlingResult fling_result_message = 3;
      case 3: {
        if (tag == 26) {
         parse_fling_result_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fling_result_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:anymote.messages.ResponseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:anymote.messages.ResponseMessage)
  return false;
#undef DO_
}

void ResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:anymote.messages.ResponseMessage)
  // optional .anymote.messages.Data data_message = 1;
  if (has_data_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->data_message(), output);
  }

  // optional .anymote.messages.FlingResult fling_result_message = 3;
  if (has_fling_result_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->fling_result_message(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:anymote.messages.ResponseMessage)
}

int ResponseMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .anymote.messages.Data data_message = 1;
    if (has_data_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_message());
    }

    // optional .anymote.messages.FlingResult fling_result_message = 3;
    if (has_fling_result_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fling_result_message());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseMessage*>(&from));
}

void ResponseMessage::MergeFrom(const ResponseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_message()) {
      mutable_data_message()->::anymote::messages::Data::MergeFrom(from.data_message());
    }
    if (from.has_fling_result_message()) {
      mutable_fling_result_message()->::anymote::messages::FlingResult::MergeFrom(from.fling_result_message());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ResponseMessage::CopyFrom(const ResponseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseMessage::IsInitialized() const {

  if (has_data_message()) {
    if (!this->data_message().IsInitialized()) return false;
  }
  if (has_fling_result_message()) {
    if (!this->fling_result_message().IsInitialized()) return false;
  }
  return true;
}

void ResponseMessage::Swap(ResponseMessage* other) {
  if (other != this) {
    std::swap(data_message_, other->data_message_);
    std::swap(fling_result_message_, other->fling_result_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseMessage::GetTypeName() const {
  return "anymote.messages.ResponseMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int KeyEvent::kKeycodeFieldNumber;
const int KeyEvent::kActionFieldNumber;
#endif  // !_MSC_VER

KeyEvent::KeyEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:anymote.messages.KeyEvent)
}

void KeyEvent::InitAsDefaultInstance() {
}

KeyEvent::KeyEvent(const KeyEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:anymote.messages.KeyEvent)
}

void KeyEvent::SharedCtor() {
  _cached_size_ = 0;
  keycode_ = 0;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyEvent::~KeyEvent() {
  // @@protoc_insertion_point(destructor:anymote.messages.KeyEvent)
  SharedDtor();
}

void KeyEvent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void KeyEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KeyEvent& KeyEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_remote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
#endif
  return *default_instance_;
}

KeyEvent* KeyEvent::default_instance_ = NULL;

KeyEvent* KeyEvent::New() const {
  return new KeyEvent;
}

void KeyEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KeyEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(keycode_, action_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool KeyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:anymote.messages.KeyEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .anymote.messages.Code keycode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::anymote::messages::Code_IsValid(value)) {
            set_keycode(static_cast< ::anymote::messages::Code >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // required .anymote.messages.Action action = 2;
      case 2: {
        if (tag == 16) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::anymote::messages::Action_IsValid(value)) {
            set_action(static_cast< ::anymote::messages::Action >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:anymote.messages.KeyEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:anymote.messages.KeyEvent)
  return false;
#undef DO_
}

void KeyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:anymote.messages.KeyEvent)
  // required .anymote.messages.Code keycode = 1;
  if (has_keycode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->keycode(), output);
  }

  // required .anymote.messages.Action action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:anymote.messages.KeyEvent)
}

int KeyEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .anymote.messages.Code keycode = 1;
    if (has_keycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->keycode());
    }

    // required .anymote.messages.Action action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KeyEvent*>(&from));
}

void KeyEvent::MergeFrom(const KeyEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keycode()) {
      set_keycode(from.keycode());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void KeyEvent::CopyFrom(const KeyEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KeyEvent::Swap(KeyEvent* other) {
  if (other != this) {
    std::swap(keycode_, other->keycode_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string KeyEvent::GetTypeName() const {
  return "anymote.messages.KeyEvent";
}


// ===================================================================

#ifndef _MSC_VER
const int MouseEvent::kXDeltaFieldNumber;
const int MouseEvent::kYDeltaFieldNumber;
#endif  // !_MSC_VER

MouseEvent::MouseEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:anymote.messages.MouseEvent)
}

void MouseEvent::InitAsDefaultInstance() {
}

MouseEvent::MouseEvent(const MouseEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:anymote.messages.MouseEvent)
}

void MouseEvent::SharedCtor() {
  _cached_size_ = 0;
  x_delta_ = 0;
  y_delta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MouseEvent::~MouseEvent() {
  // @@protoc_insertion_point(destructor:anymote.messages.MouseEvent)
  SharedDtor();
}

void MouseEvent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MouseEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MouseEvent& MouseEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_remote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
#endif
  return *default_instance_;
}

MouseEvent* MouseEvent::default_instance_ = NULL;

MouseEvent* MouseEvent::New() const {
  return new MouseEvent;
}

void MouseEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MouseEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_delta_, y_delta_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MouseEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:anymote.messages.MouseEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x_delta = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_delta_)));
          set_has_x_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y_delta;
        break;
      }

      // required int32 y_delta = 2;
      case 2: {
        if (tag == 16) {
         parse_y_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_delta_)));
          set_has_y_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:anymote.messages.MouseEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:anymote.messages.MouseEvent)
  return false;
#undef DO_
}

void MouseEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:anymote.messages.MouseEvent)
  // required int32 x_delta = 1;
  if (has_x_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x_delta(), output);
  }

  // required int32 y_delta = 2;
  if (has_y_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y_delta(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:anymote.messages.MouseEvent)
}

int MouseEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x_delta = 1;
    if (has_x_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x_delta());
    }

    // required int32 y_delta = 2;
    if (has_y_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y_delta());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MouseEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MouseEvent*>(&from));
}

void MouseEvent::MergeFrom(const MouseEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_delta()) {
      set_x_delta(from.x_delta());
    }
    if (from.has_y_delta()) {
      set_y_delta(from.y_delta());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MouseEvent::CopyFrom(const MouseEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MouseEvent::Swap(MouseEvent* other) {
  if (other != this) {
    std::swap(x_delta_, other->x_delta_);
    std::swap(y_delta_, other->y_delta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MouseEvent::GetTypeName() const {
  return "anymote.messages.MouseEvent";
}


// ===================================================================

#ifndef _MSC_VER
const int MouseWheel::kXScrollFieldNumber;
const int MouseWheel::kYScrollFieldNumber;
#endif  // !_MSC_VER

MouseWheel::MouseWheel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:anymote.messages.MouseWheel)
}

void MouseWheel::InitAsDefaultInstance() {
}

MouseWheel::MouseWheel(const MouseWheel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:anymote.messages.MouseWheel)
}

void MouseWheel::SharedCtor() {
  _cached_size_ = 0;
  x_scroll_ = 0;
  y_scroll_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MouseWheel::~MouseWheel() {
  // @@protoc_insertion_point(destructor:anymote.messages.MouseWheel)
  SharedDtor();
}

void MouseWheel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MouseWheel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MouseWheel& MouseWheel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_remote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
#endif
  return *default_instance_;
}

MouseWheel* MouseWheel::default_instance_ = NULL;

MouseWheel* MouseWheel::New() const {
  return new MouseWheel;
}

void MouseWheel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MouseWheel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_scroll_, y_scroll_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MouseWheel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:anymote.messages.MouseWheel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x_scroll = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_scroll_)));
          set_has_x_scroll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y_scroll;
        break;
      }

      // required int32 y_scroll = 2;
      case 2: {
        if (tag == 16) {
         parse_y_scroll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_scroll_)));
          set_has_y_scroll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:anymote.messages.MouseWheel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:anymote.messages.MouseWheel)
  return false;
#undef DO_
}

void MouseWheel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:anymote.messages.MouseWheel)
  // required int32 x_scroll = 1;
  if (has_x_scroll()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x_scroll(), output);
  }

  // required int32 y_scroll = 2;
  if (has_y_scroll()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y_scroll(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:anymote.messages.MouseWheel)
}

int MouseWheel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x_scroll = 1;
    if (has_x_scroll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x_scroll());
    }

    // required int32 y_scroll = 2;
    if (has_y_scroll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y_scroll());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MouseWheel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MouseWheel*>(&from));
}

void MouseWheel::MergeFrom(const MouseWheel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_scroll()) {
      set_x_scroll(from.x_scroll());
    }
    if (from.has_y_scroll()) {
      set_y_scroll(from.y_scroll());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MouseWheel::CopyFrom(const MouseWheel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseWheel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MouseWheel::Swap(MouseWheel* other) {
  if (other != this) {
    std::swap(x_scroll_, other->x_scroll_);
    std::swap(y_scroll_, other->y_scroll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MouseWheel::GetTypeName() const {
  return "anymote.messages.MouseWheel";
}


// ===================================================================

#ifndef _MSC_VER
const int Connect::kDeviceNameFieldNumber;
const int Connect::kVersionFieldNumber;
#endif  // !_MSC_VER

Connect::Connect()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:anymote.messages.Connect)
}

void Connect::InitAsDefaultInstance() {
}

Connect::Connect(const Connect& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:anymote.messages.Connect)
}

void Connect::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Connect::~Connect() {
  // @@protoc_insertion_point(destructor:anymote.messages.Connect)
  SharedDtor();
}

void Connect::SharedDtor() {
  if (device_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Connect& Connect::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_remote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
#endif
  return *default_instance_;
}

Connect* Connect::default_instance_ = NULL;

Connect* Connect::New() const {
  return new Connect;
}

void Connect::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_device_name()) {
      if (device_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_name_->clear();
      }
    }
    version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:anymote.messages.Connect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string device_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:anymote.messages.Connect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:anymote.messages.Connect)
  return false;
#undef DO_
}

void Connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:anymote.messages.Connect)
  // required string device_name = 1;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_name(), output);
  }

  // optional int32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:anymote.messages.Connect)
}

int Connect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string device_name = 1;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }

    // optional int32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Connect*>(&from));
}

void Connect::MergeFrom(const Connect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_name()) {
      set_device_name(from.device_name());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Connect::CopyFrom(const Connect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Connect::Swap(Connect* other) {
  if (other != this) {
    std::swap(device_name_, other->device_name_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Connect::GetTypeName() const {
  return "anymote.messages.Connect";
}


// ===================================================================

#ifndef _MSC_VER
const int Fling::kUriFieldNumber;
#endif  // !_MSC_VER

Fling::Fling()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:anymote.messages.Fling)
}

void Fling::InitAsDefaultInstance() {
}

Fling::Fling(const Fling& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:anymote.messages.Fling)
}

void Fling::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fling::~Fling() {
  // @@protoc_insertion_point(destructor:anymote.messages.Fling)
  SharedDtor();
}

void Fling::SharedDtor() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Fling::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Fling& Fling::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_remote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
#endif
  return *default_instance_;
}

Fling* Fling::default_instance_ = NULL;

Fling* Fling::New() const {
  return new Fling;
}

void Fling::Clear() {
  if (has_uri()) {
    if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      uri_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Fling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:anymote.messages.Fling)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:anymote.messages.Fling)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:anymote.messages.Fling)
  return false;
#undef DO_
}

void Fling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:anymote.messages.Fling)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:anymote.messages.Fling)
}

int Fling::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fling::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Fling*>(&from));
}

void Fling::MergeFrom(const Fling& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_uri(from.uri());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Fling::CopyFrom(const Fling& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fling::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Fling::Swap(Fling* other) {
  if (other != this) {
    std::swap(uri_, other->uri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Fling::GetTypeName() const {
  return "anymote.messages.Fling";
}


// ===================================================================

#ifndef _MSC_VER
const int Data::kTypeFieldNumber;
const int Data::kDataFieldNumber;
#endif  // !_MSC_VER

Data::Data()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:anymote.messages.Data)
}

void Data::InitAsDefaultInstance() {
}

Data::Data(const Data& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:anymote.messages.Data)
}

void Data::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:anymote.messages.Data)
  SharedDtor();
}

void Data::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Data& Data::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_remote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
#endif
  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New() const {
  return new Data;
}

void Data::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:anymote.messages.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:anymote.messages.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:anymote.messages.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:anymote.messages.Data)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // required string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:anymote.messages.Data)
}

int Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Data*>(&from));
}

void Data::MergeFrom(const Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Data::CopyFrom(const Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Data::Swap(Data* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Data::GetTypeName() const {
  return "anymote.messages.Data";
}


// ===================================================================

bool FlingResult_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FlingResult_Result FlingResult::SUCCESS;
const FlingResult_Result FlingResult::FAILURE;
const FlingResult_Result FlingResult::Result_MIN;
const FlingResult_Result FlingResult::Result_MAX;
const int FlingResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FlingResult::kResultFieldNumber;
#endif  // !_MSC_VER

FlingResult::FlingResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:anymote.messages.FlingResult)
}

void FlingResult::InitAsDefaultInstance() {
}

FlingResult::FlingResult(const FlingResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:anymote.messages.FlingResult)
}

void FlingResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlingResult::~FlingResult() {
  // @@protoc_insertion_point(destructor:anymote.messages.FlingResult)
  SharedDtor();
}

void FlingResult::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FlingResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FlingResult& FlingResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_remote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
#endif
  return *default_instance_;
}

FlingResult* FlingResult::default_instance_ = NULL;

FlingResult* FlingResult::New() const {
  return new FlingResult;
}

void FlingResult::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FlingResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:anymote.messages.FlingResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .anymote.messages.FlingResult.Result result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::anymote::messages::FlingResult_Result_IsValid(value)) {
            set_result(static_cast< ::anymote::messages::FlingResult_Result >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:anymote.messages.FlingResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:anymote.messages.FlingResult)
  return false;
#undef DO_
}

void FlingResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:anymote.messages.FlingResult)
  // required .anymote.messages.FlingResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:anymote.messages.FlingResult)
}

int FlingResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .anymote.messages.FlingResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlingResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FlingResult*>(&from));
}

void FlingResult::MergeFrom(const FlingResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FlingResult::CopyFrom(const FlingResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlingResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FlingResult::Swap(FlingResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FlingResult::GetTypeName() const {
  return "anymote.messages.FlingResult";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace anymote

// @@protoc_insertion_point(global_scope)
